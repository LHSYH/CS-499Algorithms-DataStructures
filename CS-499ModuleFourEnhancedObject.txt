//============================================================================
// Name        : CS-499 Data Structures & Algorithms Artifact
// Author      : Liewy Habte
// Description : CS-499 Enhanced Artifact - Hash Tables & Chaining
//============================================================================

#include <algorithm>
#include <climits>
#include <iostream>
#include <string> // atoi
#include <time.h>

#include "CSVparser.hpp"

using namespace std;

//============================================================================
// Global definitions visible to all methods and classes
//============================================================================

const unsigned int DEFAULT_SIZE = 179;

// forward declarations
double strToDouble(string str, char ch);

// defines a structure to hold bid information
struct Bid {
    string bidId; // unique identifier
    string title;
    string fund;
    double amount;
    Bid() {
        amount = 0.0;
    }
};

//============================================================================
// Hash Table class definition
//============================================================================

/**
 * Defines a class containing data members and methods to
 * implement a hash table with chaining.
 */
class HashTable {

private:
    // (1): Defines structures to hold bids
	struct myNode {
		Bid myBid;
		unsigned key;
		myNode* next;

		//default constructor
		myNode() {
			key = UINT_MAX; //Expression indicates the largest unsigned integer maximum value
			next = nullptr;
		}

		//Below is done to initialize using bid
		myNode(Bid newBid) : myNode() {
			myBid = newBid; //Bid that is inside the node will be assigned "newBid".
		}

		//Below is done to initialize using a bid and key
		myNode(Bid newBid, unsigned newKey) : myNode(newBid) {
			key = newKey; //key that is inside the node will be assigned "newKey".
		}
	};

	vector<myNode> myNodes;

	unsigned tableSize = DEFAULT_SIZE;

    unsigned int hash(int key);

public:
    HashTable();
    HashTable(unsigned size);
    virtual ~HashTable();
    void Insert(Bid bid);
    void PrintAll();
    void Remove(string bidId);
    Bid Search(string bidId);
};

/**
 * Default constructor
 */
HashTable::HashTable() {
    // (2): Initializes the structures used to hold bids
	myNodes.resize(tableSize);
}

HashTable::HashTable(unsigned size){
	this->tableSize = size;
}

/**
 * Destructor
 */
HashTable::~HashTable() {
    // (3): Implements logic to free storage when class is destroyed
	myNodes.erase(myNodes.begin());
}

/**
 * Calculates the hash value of a given key.
 * Note that key is specifically defined as
 * unsigned int to prevent undefined results
 * of a negative list index.
 *
 * @param key The key to hash
 * @return The calculated hash
 */
unsigned int HashTable::hash(int key) {
    // (4): Implements logic to calculate a hash value
	return key % tableSize;
}

/**
 * Insert a bid
 *
 * @param bid The bid to insert
 */
void HashTable::Insert(Bid bid) {
    // (5): Implements logic to insert a bid

	//Below: key is created, use hash function, retrieve "bidId", use "c_str" for string convert
	//use "atoi" to take string that was just converted, and then turn it into a integer.
	unsigned key = hash(atoi(bid.bidId.c_str()));

	//Get the node using the key
    myNode* oldNode = &(myNodes.at(key));

    //If there is no entry available for the key
    if (oldNode == nullptr) {
    	myNode* newNode = new myNode(bid, key);
    	myNodes.insert(myNodes.begin() + key, (*newNode));

    } else {
    	//If there is a node
    	if (oldNode->key == UINT_MAX) { //if key for the node entry is "UINT_MAX"
    		oldNode->key = key; //assign the key
    		oldNode->myBid = bid; //assign the bid
    		oldNode->next = nullptr; //initialize next pointer to null
    	} else {
    		//Search for the next available node (last one)
    		while (oldNode->next != nullptr) {//use while-loop until the next pointer is null
    			oldNode = oldNode->next;      //create a node instance, and then assign it to
    			                              //the next pointer
    		}
    		oldNode->next = new myNode(bid, key);
    	}
    }
}

/**
 * Print all bids
 */
void HashTable::PrintAll() {
    // (6): Implements logic to print all bids

}

/**
 * Remove a bid
 *
 * @param bidId The bid id to search for
 */
void HashTable::Remove(string bidId) {
    // (7): Implements logic to remove a bid
	unsigned key = hash(atoi(bidId.c_str()));
	myNodes.erase(myNodes.begin() + key);
}

/**
 * Search for the specified bidId
 *
 * @param bidId The bid id to search for
 */
Bid HashTable::Search(string bidId) {
    Bid bid;

    // (8): Implements logic to search for and return a bid

    //Below: key is created, use hash function, retrieve "bidId", use "c_str" for string convert
    //use "atoi" to take string that was just converted, and then turn it into a integer.
    unsigned key = hash(atoi(bidId.c_str()));

    //get the node using the key
    myNode* node = &(myNodes.at(key));

    //If there was no entry found after searching
    if (node == nullptr || node->key == UINT_MAX){
    	return bid; //returns empty bid
    }

    //If there was a node found that can match the key
    if (node != nullptr && node->key != UINT_MAX && node->myBid.bidId.compare(bidId) == 0) {
    	return node->myBid;
    }

    //linked list to find the corresponding match
    while (node != nullptr) {
    	if (node->key != UINT_MAX && node->myBid.bidId.compare(bidId) == 0) {
    		return node->myBid;
    	}
    	node = node->next;
    }

    return bid;
}

//============================================================================
// Static methods used for testing
//============================================================================

/**
 * Displays the bid information to the console (std::out)
 *
 * @param bid struct containing the bid info
 */
void displayBid(Bid bid) {
    cout << bid.bidId << ": " << bid.title << " | " << bid.amount << " | "
            << bid.fund << endl;
    return;
}

/**
 * Load a CSV file containing bids into a container
 *
 * @param csvPath the path to the CSV file to load
 * @return a container holding all the bids read
 */
void loadBids(string csvPath, HashTable* hashTable) {
    cout << "Loading CSV file " << csvPath << endl;

    // initializes the CSV Parser using the given path
    csv::Parser file = csv::Parser(csvPath);

    // reads and displays header row - optional
    vector<string> header = file.getHeader();
    for (auto const& c : header) {
        cout << c << " | ";
    }
    cout << "" << endl;

    try {
        // loops to read rows of a CSV file
        for (unsigned int i = 0; i < file.rowCount(); i++) {

            // Create a data structure and add to the collection of bids
            Bid bid;
            bid.bidId = file[i][1];
            bid.title = file[i][0];
            bid.fund = file[i][8];
            bid.amount = strToDouble(file[i][4], '$');

            //cout << "Item: " << bid.title << ", Fund: " << bid.fund << ", Amount: " << bid.amount << endl;

            // pushes this bid to the end
            hashTable->Insert(bid);
        }
    } catch (csv::Error &e) {
        std::cerr << e.what() << std::endl;
    }
}

/**
 * Simple C function to convert a string to a double
 * after stripping out unwanted char
 *
 * credit: http://stackoverflow.com/a/24875936
 *
 * @param ch The character to strip out
 */
double strToDouble(string str, char ch) {
    str.erase(remove(str.begin(), str.end(), ch), str.end());
    return atof(str.c_str());
}

/**
 * The one and only main() method
 */
int main(int argc, char* argv[]) {

    // process command line arguments
    string csvPath, searchValue; //bidkey was changed to searchValue using refactor
    switch (argc) {
    case 2:
        csvPath = argv[1];
        searchValue = "98109";
        break;
    case 3:
        csvPath = argv[1];
        searchValue = argv[2];
        break;
    default:
        csvPath = "eBid_Monthly_Sales_Dec_2016.csv";
        searchValue = "98109";
    }

    // Defines a timer variable
    clock_t ticks;

    // Defines a hash table to hold all the bids
    HashTable* bidTable;

    Bid bid;

    int choice = 0;
    while (choice != 9) {
        cout << "Menu:" << endl;
        cout << "  1. Load Bids" << endl;
        cout << "  2. Display All Bids" << endl;
        cout << "  3. Find Bid" << endl;
        cout << "  4. Remove Bid" << endl;
        cout << "  9. Exit" << endl;
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {

        case 1:
            bidTable = new HashTable();

            // Initializes a timer variable before loading bids
            ticks = clock();

            // Completes the method call to load the bids
            loadBids(csvPath, bidTable);

            // Calculates elapsed time and display result
            ticks = clock() - ticks; // current clock ticks minus starting clock ticks
            cout << "time: " << ticks << " clock ticks" << endl;
            cout << "time: " << ticks * 1.0 / CLOCKS_PER_SEC << " seconds" << endl;
            break;

        case 2:
            bidTable->PrintAll();
            break;

        case 3:
            ticks = clock();

            bid = bidTable->Search(searchValue);

            ticks = clock() - ticks; // current clock ticks minus starting clock ticks

            if (!bid.bidId.empty()) {
                displayBid(bid);
            } else {
                cout << "Bid Id " << searchValue << " not found." << endl;
            }

            cout << "time: " << ticks << " clock ticks" << endl;
            cout << "time: " << ticks * 1.0 / CLOCKS_PER_SEC << " seconds" << endl;
            break;

        case 4:
            bidTable->Remove(searchValue);
            break;
        }
    }

    cout << "Good bye." << endl;

    return 0;
}
